---
import type { CollectionEntry } from 'astro:content'
import { Picture } from 'astro:assets';
import { Icon } from 'astro-icon/components'

interface Props {
    clip: CollectionEntry<'clips'>;
}

const { clip } = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/images/clips/*.{jpeg,jpg,png,gif}');
if (!images[clip.data.img]) throw new Error(`"${clip.data.img}" does not exist in glob: "src/assets/images/clips/*.{jpeg,jpg,png,gif}"`);

---
<button type="button" class="text-left" data-video-button>
    <article class="relative group overflow-clip">
        <div class="absolute z-50 w-full h-full transition-opacity duration-500 opacity-0 bg-green-600/80 group-hover:opacity-100">
            <div class="flex flex-col justify-between h-full lg:flex-row">
                <div class="relative">
                    <div class="absolute top-0 left-0 w-full h-full transition-transform duration-500 -translate-x-full group-hover:translate-x-0"></div>

                    <div class="flex flex-col justify-between h-full p-6 lg:p-10 lg:pt-14 xl:w-96 translate-y-[20%] group-hover:translate-y-0 transition-transform duration-500">
                        <div class="">
                            <h2 class="mb-4 text-2xl font-bold">{ clip.data.title }</h2>
                        </div>

                        <p class="empty:hidden mb-2">
                            { clip.data.description }
                        </p>
    
                        <dl class="py-3 lg:py-6 lg:text-xl border-t-2 border-white">
                            <dt>Agency:</dt>
                            <dd>{ clip.data.agency }</dd>
                        </dl>
                    </div>
                </div>

                <div class="flex max-lg:justify-end items-center justify-center w-full h-full transition-opacity duration-1000 opacity-0 group-hover:opacity-100">
                    <Icon class="max-xl:-translate-y-10 xl:-translate-x-10 size-[70px] lg:size-[100px]" name="ic:round-play-arrow" color="white" />
                </div>
            </div>
        </div>

        <Picture 
            class="aspect-[16/9] md:aspect-[16/10] object-cover group-hover:scale-[1.04] transition-transform duration-700 bg-slate-950"
            src={images[clip.data.img]()} 
            formats={['webp']} 
            alt={`Hero of ${clip.data.title}`} 
        />
    </article>
</button>

<dialog class="backdrop:bg-black/80 max-lg:mx-0 max-lg:max-w-[100vw]" data-dialog>
    <div class="max-w-full">
        <iframe class="max-w-full h-auto aspect-video" width="1440" height="762" data-src={`${clip.data.videoUrl}?&autoplay=1`} frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
    </div>
</dialog>

<script>
    const buttons = document.querySelectorAll('[data-video-button]');

    function isTouchDevice() {
        return (('ontouchstart' in window) ||
            (navigator.maxTouchPoints > 0));
    }
  
    buttons.forEach(button => {
        button.addEventListener('click', () => {
            if (isTouchDevice() && !button.classList.contains('touched')) {
                buttons.forEach(b => b.classList.remove('touched'));
                button.classList.add('touched');
                return;
            }

            const dialog = button.parentElement?.querySelector<HTMLDialogElement>('[data-dialog]');
            dialog?.showModal();
    
            const iframe = dialog?.querySelector('iframe');
            iframe?.setAttribute('src', iframe?.getAttribute('data-src') ?? '');
    
            dialog?.addEventListener('click', (e) => {
                if (!iframe) return;
                var rect = iframe.getBoundingClientRect();
                var isInContent = (rect.top <= e.clientY && e.clientY <= rect.top + rect.height &&
                    rect.left <= e.clientX && e.clientX <= rect.left + rect.width);
                if (!isInContent) {
                    iframe.removeAttribute('src');
                    dialog.close();
                }
            })
        });

        button.addEventListener('blur', () => {
            button.classList.remove('touched');
        });
    });
</script>
  